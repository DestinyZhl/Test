//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace SPP.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SPPContext : DbContext
    {
        public SPPContext()
            : base("name=SPPContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
    		base.OnModelCreating(modelBuilder);
            SPPEntityConfiguration.SPPOnModelCreating(modelBuilder);
        }
    
    	public virtual void Commit()
    		{
    		base.SaveChanges();
    	}
    
        public virtual DbSet<Enumeration> Enumeration { get; set; }
        public virtual DbSet<FlowChart_Detail> FlowChart_Detail { get; set; }
        public virtual DbSet<FlowChart_Detail_Temp> FlowChart_Detail_Temp { get; set; }
        public virtual DbSet<FlowChart_MgData> FlowChart_MgData { get; set; }
        public virtual DbSet<FlowChart_MgData_Temp> FlowChart_MgData_Temp { get; set; }
        public virtual DbSet<Product_ErrorInfo> Product_ErrorInfo { get; set; }
        public virtual DbSet<Product_Input> Product_Input { get; set; }
        public virtual DbSet<Product_Input_History> Product_Input_History { get; set; }
        public virtual DbSet<Project_Users_Group> Project_Users_Group { get; set; }
        public virtual DbSet<System_BU_D> System_BU_D { get; set; }
        public virtual DbSet<System_BU_M> System_BU_M { get; set; }
        public virtual DbSet<System_Function> System_Function { get; set; }
        public virtual DbSet<System_Function_Plant> System_Function_Plant { get; set; }
        public virtual DbSet<System_FunctionSub> System_FunctionSub { get; set; }
        public virtual DbSet<System_Organization> System_Organization { get; set; }
        public virtual DbSet<System_OrganizationBOM> System_OrganizationBOM { get; set; }
        public virtual DbSet<System_Plant> System_Plant { get; set; }
        public virtual DbSet<System_Project> System_Project { get; set; }
        public virtual DbSet<System_Role> System_Role { get; set; }
        public virtual DbSet<System_Role_Function> System_Role_Function { get; set; }
        public virtual DbSet<System_Role_FunctionSub> System_Role_FunctionSub { get; set; }
        public virtual DbSet<System_User_Business_Group> System_User_Business_Group { get; set; }
        public virtual DbSet<System_User_FunPlant> System_User_FunPlant { get; set; }
        public virtual DbSet<System_User_Plant> System_User_Plant { get; set; }
        public virtual DbSet<System_User_Role> System_User_Role { get; set; }
        public virtual DbSet<System_UserOrg> System_UserOrg { get; set; }
        public virtual DbSet<System_Users> System_Users { get; set; }
        public virtual DbSet<Warning_List> Warning_List { get; set; }
        public virtual DbSet<FlowChart_Master> FlowChart_Master { get; set; }
        public virtual DbSet<WIP_Change_History> WIP_Change_History { get; set; }
    
        public virtual int usp_AlterMisMatchFlag(Nullable<int> flowChart_Master_UID, string time_interval, Nullable<System.DateTime> product_date)
        {
            var flowChart_Master_UIDParameter = flowChart_Master_UID.HasValue ?
                new ObjectParameter("FlowChart_Master_UID", flowChart_Master_UID) :
                new ObjectParameter("FlowChart_Master_UID", typeof(int));
    
            var time_intervalParameter = time_interval != null ?
                new ObjectParameter("Time_interval", time_interval) :
                new ObjectParameter("Time_interval", typeof(string));
    
            var product_dateParameter = product_date.HasValue ?
                new ObjectParameter("Product_date", product_date) :
                new ObjectParameter("Product_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AlterMisMatchFlag", flowChart_Master_UIDParameter, time_intervalParameter, product_dateParameter);
        }
    
        public virtual int usp_CalculateWIP(string time_Interval, Nullable<System.DateTime> product_Date, Nullable<int> flowChart_Master_UID, string funPlant, Nullable<int> product_UID)
        {
            var time_IntervalParameter = time_Interval != null ?
                new ObjectParameter("Time_Interval", time_Interval) :
                new ObjectParameter("Time_Interval", typeof(string));
    
            var product_DateParameter = product_Date.HasValue ?
                new ObjectParameter("Product_Date", product_Date) :
                new ObjectParameter("Product_Date", typeof(System.DateTime));
    
            var flowChart_Master_UIDParameter = flowChart_Master_UID.HasValue ?
                new ObjectParameter("FlowChart_Master_UID", flowChart_Master_UID) :
                new ObjectParameter("FlowChart_Master_UID", typeof(int));
    
            var funPlantParameter = funPlant != null ?
                new ObjectParameter("FunPlant", funPlant) :
                new ObjectParameter("FunPlant", typeof(string));
    
            var product_UIDParameter = product_UID.HasValue ?
                new ObjectParameter("Product_UID", product_UID) :
                new ObjectParameter("Product_UID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CalculateWIP", time_IntervalParameter, product_DateParameter, flowChart_Master_UIDParameter, funPlantParameter, product_UIDParameter);
        }
    
        public virtual ObjectResult<usp_get_mobilefunctions_by_useruid_Result> usp_get_mobilefunctions_by_useruid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_get_mobilefunctions_by_useruid_Result>("usp_get_mobilefunctions_by_useruid", idParameter);
        }
    
        public virtual int usp_SynFlowChartDetailDataFromTemp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SynFlowChartDetailDataFromTemp");
        }
    
        public virtual int usp_AllProductData(string time_Interval, string product_Date, string customer, string project, string product_Phase, string part_Types, string color, string now_Interval)
        {
            var time_IntervalParameter = time_Interval != null ?
                new ObjectParameter("Time_Interval", time_Interval) :
                new ObjectParameter("Time_Interval", typeof(string));
    
            var product_DateParameter = product_Date != null ?
                new ObjectParameter("Product_Date", product_Date) :
                new ObjectParameter("Product_Date", typeof(string));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var projectParameter = project != null ?
                new ObjectParameter("Project", project) :
                new ObjectParameter("Project", typeof(string));
    
            var product_PhaseParameter = product_Phase != null ?
                new ObjectParameter("Product_Phase", product_Phase) :
                new ObjectParameter("Product_Phase", typeof(string));
    
            var part_TypesParameter = part_Types != null ?
                new ObjectParameter("Part_Types", part_Types) :
                new ObjectParameter("Part_Types", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var now_IntervalParameter = now_Interval != null ?
                new ObjectParameter("Now_Interval", now_Interval) :
                new ObjectParameter("Now_Interval", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AllProductData", time_IntervalParameter, product_DateParameter, customerParameter, projectParameter, product_PhaseParameter, part_TypesParameter, colorParameter, now_IntervalParameter);
        }
    }
}
